import os
import pandas as pd
import numpy as np

# set working directory
os.chdir("A:/files/Princton_Data/test_data")

# input and process first experimental group
dataset_exp1 = pd.read_excel("e1.xlsx")
CID_exp1_1 = pd.read_excel("e1.xlsx")
CID_exp1_2 = CID_exp1_1.drop(labels=[0,1,2,3,4,5,6], axis=0)
CID_exp1_3 = CID_exp1_2.rename(columns={"Unnamed: 1":"mass", "Unnamed: 2":"intensity"})
CID_in_exp1 = np.array(CID_exp1_3["intensity"])
log1_exp1 = np.concatenate([CID_in_exp1, [0]])
log2_exp1 = np.concatenate([[0], CID_in_exp1])
log3_exp1 = np.concatenate([CID_in_exp1[1:], [0,0]])
logic_1_exp1 = np.where((log1_exp1 > log2_exp1) & (log3_exp1 < log1_exp1), 1, 0)
n_exp1 = len(logic_1_exp1)
logic_2_exp1 = logic_1_exp1[0:(n_exp1-1)]
CID_exp1_3["logic"] = logic_2_exp1
max_cid_exp1 = np.max(CID_in_exp1)
RI_1_exp1 = CID_in_exp1 / max_cid_exp1
CID_exp1_3["RI_exp1"] = RI_1_exp1
CID_exp1_4 = CID_exp1_3[CID_exp1_3["logic"] != 0]

# input and process second experimental group
dataset_exp2 = pd.read_excel("e2.xlsx")
CID_exp2_1 = pd.read_excel("e2.xlsx")
CID_exp2_2 = CID_exp2_1.drop(labels=[0,1,2,3,4,5,6], axis=0)
CID_exp2_3 = CID_exp2_2.rename(columns={"Unnamed: 1":"mass", "Unnamed: 2":"intensity"})
CID_in_exp2 = np.array(CID_exp2_3["intensity"])
log1_exp2 = np.concatenate([CID_in_exp2, [0]])
log2_exp2 = np.concatenate([[0], CID_in_exp2])
log3_exp2 = np.concatenate([CID_in_exp2[1:], [0,0]])
logic_1_exp2 = np.where((log1_exp2 > log2_exp2) & (log3_exp2 < log1_exp2), 1, 0)
n_exp2 = len(logic_1_exp2)
logic_2_exp2 = logic_1_exp2[0:(n_exp2-1)]
CID_exp2_3["logic"] = logic_2_exp2
max_cid_exp2 = np.max(CID_in_exp2)
RI_1_exp2 = CID_in_exp2 / max_cid_exp2
CID_exp2_3["RI_exp2"] = RI_1_exp2
CID_exp2_4 = CID_exp2_3[CID_exp2_3["logic"] != 0]

import pandas as pd

# input and process third experimental group
dataset_exp3 = pd.read_excel("e3.xlsx")
CID_exp3_1 = pd.read_excel("e3.xlsx")
CID_exp3_2 = CID_exp3_1.drop([0, 1, 2, 3, 4, 5, 6])
CID_exp3_3 = CID_exp3_2.rename(columns={"X1": "mass", "X2": "intensity"})
CID_in_exp3 = pd.to_numeric(CID_exp3_3["intensity"])
log1_exp3 = pd.concat([CID_in_exp3, pd.Series([0])], ignore_index=True)
log2_exp3 = pd.concat([pd.Series([0]), CID_in_exp3], ignore_index=True)
log3_exp3 = pd.concat([CID_in_exp3[1:], pd.Series([0, 0])], ignore_index=True)
logic_1_exp3 = pd.Series([1 if log1_exp3[i] > log2_exp3[i] and log3_exp3[i] < log1_exp3[i] else 0 for i in range(len(log1_exp3))])
n_exp3 = len(logic_1_exp3)
logic_2_exp3 = logic_1_exp3.iloc[:-1]
CID_exp3_3["logic"] = logic_2_exp3.values
max_cid_exp3 = CID_in_exp3.max()
RI_1_exp3 = CID_in_exp3 / max_cid_exp3
CID_exp3_3["RI_exp3"] = RI_1_exp3
CID_exp3_4 = CID_exp3_3[CID_exp3_3["logic"] != 0]

# input and process first control group
dataset_con1 = pd.read_excel("c1.xlsx")
CID_con1_1 = pd.read_excel("c1.xlsx")
CID_con1_2 = CID_con1_1.drop([0, 1, 2, 3, 4, 5, 6])
CID_con1_3 = CID_con1_2.rename(columns={"X1": "mass", "X2": "intensity"})
CID_in_con1 = pd.to_numeric(CID_con1_3["intensity"])
log1_con1 = pd.concat([CID_in_con1, pd.Series([0])], ignore_index=True)
log2_con1 = pd.concat([pd.Series([0]), CID_in_con1], ignore_index=True)
log3_con1 = pd.concat([CID_in_con1[1:], pd.Series([0, 0])], ignore_index=True)
logic_1_con1 = pd.Series([1 if log1_con1[i] > log2_con1[i] and log3_con1[i] < log1_con1[i] else 0 for i in range(len(log1_con1))])
n_con1 = len(logic_1_con1)
logic_2_con1 = logic_1_con1.iloc[:-1]
CID_con1_3["logic"] = logic_2_con1.values
max_cid_con1 = CID_in_con1.max()
RI_1_con1 = CID_in_con1 / max_cid_con1
CID_con1_3["RI_con1"] = RI_1_con1
CID_con1_4 = CID_con1_3[CID_con1_3["logic"] != 0]

import pandas as pd

# Input and process second control group
dataset_con2 = pd.read_excel("c2.xlsx")
CID_con2_1 = pd.read_excel("c2.xlsx")
CID_con2_2 = CID_con2_1.iloc[7:].reset_index(drop=True)
CID_con2_3 = CID_con2_2.rename(columns={"mass":"mass", "intensity":"intensity"})
CID_in_con2 = CID_con2_3["intensity"].astype(float)
log1_con2 = pd.concat([CID_in_con2, pd.Series([0])]).reset_index(drop=True)
log2_con2 = pd.concat([pd.Series([0]), CID_in_con2]).reset_index(drop=True)
log3_con2 = pd.concat([CID_in_con2[1:], pd.Series([0, 0])]).reset_index(drop=True)
logic_1_con2 = (log1_con2 > log2_con2) & (log3_con2 < log1_con2)
logic_1_con2 = logic_1_con2.astype(int)
n_con2 = len(logic_1_con2)
logic_2_con2 = logic_1_con2.iloc[:n_con2-1]
CID_con2_3["logic"] = logic_2_con2.values
max_cid_con2 = max(CID_in_con2)
RI_1_con2 = CID_in_con2 / max_cid_con2
CID_con2_3["RI_con2"] = RI_1_con2.values
CID_con2_4 = CID_con2_3[CID_con2_3["logic"] != 0]

# Input and process third control group
dataset_con3 = pd.read_excel("c3.xlsx")
CID_con3_1 = pd.read_excel("c3.xlsx")
CID_con3_2 = CID_con3_1.iloc[7:].reset_index(drop=True)
CID_con3_3 = CID_con3_2.rename(columns={"mass":"mass", "intensity":"intensity"})
CID_in_con3 = CID_con3_3["intensity"].astype(float)
log1_con3 = pd.concat([CID_in_con3, pd.Series([0])]).reset_index(drop=True)
log2_con3 = pd.concat([pd.Series([0]), CID_in_con3]).reset_index(drop=True)
log3_con3 = pd.concat([CID_in_con3[1:], pd.Series([0, 0])]).reset_index(drop=True)
logic_1_con3 = (log1_con3 > log2_con3) & (log3_con3 < log1_con3)
logic_1_con3 = logic_1_con3.astype(int)
n_con3 = len(logic_1_con3)
logic_2_con3 = logic_1_con3.iloc[:n_con3-1]
CID_con3_3["logic"] = logic_2_con3.values
max_cid_con3 = max(CID_in_con3)
RI_1_con3 = CID_in_con3 / max_cid_con3
CID_con3_3["RI_con3"] = RI_1_con3.values
CID_con3_4 = CID_con3_3[CID_con3_3["logic"] != 0]

# Set options for displaying numbers
pd.set_option("precision", 8)

# Create data frames for experiments and controls
exp1 = pd.DataFrame({"num1": CID_exp1_4["mass"].astype(float)})
exp2 = pd.DataFrame({"num2": CID_exp2_4["mass"].astype(float)})
exp3 = pd.DataFrame({"num3": CID_exp3_4["mass"].astype(float)})


